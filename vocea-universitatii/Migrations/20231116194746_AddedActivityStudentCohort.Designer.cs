// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VoceaUniversitatii.Helpers;

#nullable disable

namespace vocea_universitatii.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231116194746_AddedActivityStudentCohort")]
    partial class AddedActivityStudentCohort
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VoceaUniversitatii.Models.AcademicYear", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("EndYear")
                        .HasColumnType("integer");

                    b.Property<int>("StartYear")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AcademicYears");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EndYear = 2023,
                            StartYear = 2022
                        },
                        new
                        {
                            Id = 2L,
                            EndYear = 2024,
                            StartYear = 2023
                        },
                        new
                        {
                            Id = 3L,
                            EndYear = 2025,
                            StartYear = 2024
                        });
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.Activity", b =>
                {
                    b.Property<long>("DisciplineId")
                        .HasColumnType("bigint");

                    b.Property<long>("ActivityTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedByid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByid")
                        .HasColumnType("integer");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedByid")
                        .HasColumnType("integer");

                    b.HasKey("DisciplineId", "ActivityTypeId", "TeacherId");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("CreatedByid");

                    b.HasIndex("DeletedByid");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("TeacherId");

                    b.HasIndex("UpdatedByid");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.ActivityStudentCohort", b =>
                {
                    b.Property<long>("ActivityId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentCohortId")
                        .HasColumnType("bigint");

                    b.Property<long>("ActivityDisciplineId")
                        .HasColumnType("bigint");

                    b.Property<long>("ActivityTeacherId")
                        .HasColumnType("bigint");

                    b.Property<long>("ActivityTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedByid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedByid")
                        .HasColumnType("integer");

                    b.HasKey("ActivityId", "StudentCohortId");

                    b.HasIndex("CreatedByid");

                    b.HasIndex("DeletedByid");

                    b.HasIndex("StudentCohortId");

                    b.HasIndex("UpdatedByid");

                    b.HasIndex("ActivityDisciplineId", "ActivityTypeId", "ActivityTeacherId");

                    b.ToTable("ActivityStudentCohorts");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.ActivityType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Curs"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Seminar"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Laborator"
                        });
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.Cohort", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CohortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cohorts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CohortName = "Subgrupa"
                        },
                        new
                        {
                            Id = 2L,
                            CohortName = "Grupa"
                        },
                        new
                        {
                            Id = 3L,
                            CohortName = "Serie"
                        },
                        new
                        {
                            Id = 4L,
                            CohortName = "An"
                        });
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedByid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByid")
                        .HasColumnType("integer");

                    b.Property<long>("FacultyId")
                        .HasColumnType("bigint");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedByid")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByid");

                    b.HasIndex("DeletedByid");

                    b.HasIndex("FacultyId");

                    b.HasIndex("UpdatedByid");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.Discipline", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AbsoluteSemester")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedByid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByid")
                        .HasColumnType("integer");

                    b.Property<long>("EvaluationMethodId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Facultativ")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Optional")
                        .HasColumnType("boolean");

                    b.Property<long?>("ParentDisciplineId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudyProgramId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedByid")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByid");

                    b.HasIndex("DeletedByid");

                    b.HasIndex("EvaluationMethodId");

                    b.HasIndex("ParentDisciplineId");

                    b.HasIndex("StudyProgramId");

                    b.HasIndex("UpdatedByid");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.EvaluationMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedByid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByid")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedByid")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByid");

                    b.HasIndex("DeletedByid");

                    b.HasIndex("UpdatedByid");

                    b.ToTable("EvaluationMethods");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Examen",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Colocviu",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Verificare",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Calificativ",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.Faculty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedByid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByid")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedByid")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByid");

                    b.HasIndex("DeletedByid");

                    b.HasIndex("UpdatedByid");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            LanguageName = "English"
                        },
                        new
                        {
                            Id = 2L,
                            LanguageName = "French"
                        },
                        new
                        {
                            Id = 3L,
                            LanguageName = "German"
                        });
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.StudentCohort", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AcademicYearId")
                        .HasColumnType("bigint");

                    b.Property<long>("CohortTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedByid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByid")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ParentStudentCohortId")
                        .HasColumnType("bigint");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<long>("StudyProgramId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudyYearId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedByid")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CohortTypeId");

                    b.HasIndex("CreatedByid");

                    b.HasIndex("DeletedByid");

                    b.HasIndex("ParentStudentCohortId");

                    b.HasIndex("StudyProgramId");

                    b.HasIndex("StudyYearId");

                    b.HasIndex("UpdatedByid");

                    b.ToTable("StudentCohorts");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.StudyProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedByid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByid")
                        .HasColumnType("integer");

                    b.Property<long>("FacultyId")
                        .HasColumnType("bigint");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedByid")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByid");

                    b.HasIndex("DeletedByid");

                    b.HasIndex("FacultyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UpdatedByid");

                    b.ToTable("StudyPrograms");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.StudyProgramAcademicYearEnrollments", b =>
                {
                    b.Property<long>("StudyProgramId")
                        .HasColumnType("bigint");

                    b.Property<long>("AcademicYearId")
                        .HasColumnType("bigint");

                    b.HasKey("StudyProgramId", "AcademicYearId");

                    b.HasIndex("AcademicYearId");

                    b.ToTable("StudyProgramAcademicYearEnrollments");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.StudyYear", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StudyYears");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Anul I - Licență"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Anul II - Licență"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Anul III - Licență"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Anul IV - Licență"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Anul I - Master"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Anul II - Master"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Doctorat"
                        });
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.Teacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CNP")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedByid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByid")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("TeacherTitleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedByid")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByid");

                    b.HasIndex("DeletedByid");

                    b.HasIndex("TeacherTitleId");

                    b.HasIndex("UpdatedByid");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.TeacherDepartmentMembership", b =>
                {
                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("BaseDepartment")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedByid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedByid")
                        .HasColumnType("integer");

                    b.HasKey("TeacherId", "DepartmentId");

                    b.HasIndex("CreatedByid");

                    b.HasIndex("DeletedByid");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UpdatedByid");

                    b.ToTable("TeacherDepartmentMembership");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.TeacherTitle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedByid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByid")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedByid")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByid");

                    b.HasIndex("DeletedByid");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.HasIndex("UpdatedByid");

                    b.ToTable("TeacherTitles");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.Activity", b =>
                {
                    b.HasOne("VoceaUniversitatii.Models.ActivityType", "ActivityType")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoceaUniversitatii.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByid");

                    b.HasOne("VoceaUniversitatii.Models.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedByid");

                    b.HasOne("VoceaUniversitatii.Models.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoceaUniversitatii.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoceaUniversitatii.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByid");

                    b.Navigation("ActivityType");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Discipline");

                    b.Navigation("Teacher");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.ActivityStudentCohort", b =>
                {
                    b.HasOne("VoceaUniversitatii.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByid");

                    b.HasOne("VoceaUniversitatii.Models.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedByid");

                    b.HasOne("VoceaUniversitatii.Models.StudentCohort", "StudentCohort")
                        .WithMany()
                        .HasForeignKey("StudentCohortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoceaUniversitatii.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByid");

                    b.HasOne("VoceaUniversitatii.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityDisciplineId", "ActivityTypeId", "ActivityTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("StudentCohort");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.Department", b =>
                {
                    b.HasOne("VoceaUniversitatii.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByid");

                    b.HasOne("VoceaUniversitatii.Models.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedByid");

                    b.HasOne("VoceaUniversitatii.Models.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoceaUniversitatii.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByid");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Faculty");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.Discipline", b =>
                {
                    b.HasOne("VoceaUniversitatii.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByid");

                    b.HasOne("VoceaUniversitatii.Models.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedByid");

                    b.HasOne("VoceaUniversitatii.Models.EvaluationMethod", "EvaluationMethod")
                        .WithMany("Disciplines")
                        .HasForeignKey("EvaluationMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoceaUniversitatii.Models.Discipline", "ParentDiscipline")
                        .WithMany("ChildOptionslDisciplines")
                        .HasForeignKey("ParentDisciplineId");

                    b.HasOne("VoceaUniversitatii.Models.StudyProgram", "StudyProgram")
                        .WithMany("Disciplines")
                        .HasForeignKey("StudyProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoceaUniversitatii.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByid");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("EvaluationMethod");

                    b.Navigation("ParentDiscipline");

                    b.Navigation("StudyProgram");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.EvaluationMethod", b =>
                {
                    b.HasOne("VoceaUniversitatii.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByid");

                    b.HasOne("VoceaUniversitatii.Models.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedByid");

                    b.HasOne("VoceaUniversitatii.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByid");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.Faculty", b =>
                {
                    b.HasOne("VoceaUniversitatii.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByid");

                    b.HasOne("VoceaUniversitatii.Models.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedByid");

                    b.HasOne("VoceaUniversitatii.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByid");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.StudentCohort", b =>
                {
                    b.HasOne("VoceaUniversitatii.Models.AcademicYear", "AcademicYear")
                        .WithMany("StudentCohorts")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoceaUniversitatii.Models.Cohort", "CohortType")
                        .WithMany("StudentCohorts")
                        .HasForeignKey("CohortTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoceaUniversitatii.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByid");

                    b.HasOne("VoceaUniversitatii.Models.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedByid");

                    b.HasOne("VoceaUniversitatii.Models.StudentCohort", "ParentStudentCohort")
                        .WithMany()
                        .HasForeignKey("ParentStudentCohortId");

                    b.HasOne("VoceaUniversitatii.Models.StudyProgram", "StudyProgram")
                        .WithMany("StudentCohorts")
                        .HasForeignKey("StudyProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoceaUniversitatii.Models.StudyYear", "StudyYear")
                        .WithMany("StudentCohorts")
                        .HasForeignKey("StudyYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoceaUniversitatii.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByid");

                    b.Navigation("AcademicYear");

                    b.Navigation("CohortType");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ParentStudentCohort");

                    b.Navigation("StudyProgram");

                    b.Navigation("StudyYear");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.StudyProgram", b =>
                {
                    b.HasOne("VoceaUniversitatii.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByid");

                    b.HasOne("VoceaUniversitatii.Models.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedByid");

                    b.HasOne("VoceaUniversitatii.Models.Faculty", "Faculty")
                        .WithMany("StudyPrograms")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoceaUniversitatii.Models.Language", "Language")
                        .WithMany("StudyPrograms")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoceaUniversitatii.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByid");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Faculty");

                    b.Navigation("Language");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.StudyProgramAcademicYearEnrollments", b =>
                {
                    b.HasOne("VoceaUniversitatii.Models.AcademicYear", "AcademicYear")
                        .WithMany("StudyProgramAcademicYearEnrollments")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoceaUniversitatii.Models.StudyProgram", "StudyProgram")
                        .WithMany("StudyProgramAcademicYearEnrollments")
                        .HasForeignKey("StudyProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("StudyProgram");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.Teacher", b =>
                {
                    b.HasOne("VoceaUniversitatii.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByid");

                    b.HasOne("VoceaUniversitatii.Models.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedByid");

                    b.HasOne("VoceaUniversitatii.Models.TeacherTitle", "Title")
                        .WithMany("Teachers")
                        .HasForeignKey("TeacherTitleId");

                    b.HasOne("VoceaUniversitatii.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByid");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Title");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.TeacherDepartmentMembership", b =>
                {
                    b.HasOne("VoceaUniversitatii.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByid");

                    b.HasOne("VoceaUniversitatii.Models.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedByid");

                    b.HasOne("VoceaUniversitatii.Models.Department", "Department")
                        .WithMany("TeacherDepartmentMemberships")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoceaUniversitatii.Models.Teacher", "Teacher")
                        .WithMany("TeacherDepartmentMemberships")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoceaUniversitatii.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByid");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Department");

                    b.Navigation("Teacher");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.TeacherTitle", b =>
                {
                    b.HasOne("VoceaUniversitatii.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByid");

                    b.HasOne("VoceaUniversitatii.Models.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedByid");

                    b.HasOne("VoceaUniversitatii.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByid");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.AcademicYear", b =>
                {
                    b.Navigation("StudentCohorts");

                    b.Navigation("StudyProgramAcademicYearEnrollments");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.ActivityType", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.Cohort", b =>
                {
                    b.Navigation("StudentCohorts");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.Department", b =>
                {
                    b.Navigation("TeacherDepartmentMemberships");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.Discipline", b =>
                {
                    b.Navigation("ChildOptionslDisciplines");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.EvaluationMethod", b =>
                {
                    b.Navigation("Disciplines");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.Faculty", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("StudyPrograms");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.Language", b =>
                {
                    b.Navigation("StudyPrograms");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.StudyProgram", b =>
                {
                    b.Navigation("Disciplines");

                    b.Navigation("StudentCohorts");

                    b.Navigation("StudyProgramAcademicYearEnrollments");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.StudyYear", b =>
                {
                    b.Navigation("StudentCohorts");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.Teacher", b =>
                {
                    b.Navigation("TeacherDepartmentMemberships");
                });

            modelBuilder.Entity("VoceaUniversitatii.Models.TeacherTitle", b =>
                {
                    b.Navigation("Teachers");
                });
#pragma warning restore 612, 618
        }
    }
}
